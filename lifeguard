import java.io.*;
import java.util.*;

public class Main {
   public static void main(String[] args) throws IOException {
      BufferedReader in = new BufferedReader(new FileReader("lifeguards.in"));
      PrintWriter out = new PrintWriter(new FileWriter("lifeguards.out"));

      int n = Integer.parseInt(in.readLine());

      State[] actions = new State[2 * n];
      for (int i = 0; i < n; i++) {
         String[] tempI = in.readLine().split(" ");
         actions[2 * i] = new State(Integer.parseInt(tempI[0]), i, true);
         actions[2 * i + 1] = new State(Integer.parseInt(tempI[1]), i, false);
      }

      Arrays.sort(actions);

      LinkedList<Integer> active = new LinkedList<>();
      int[] alone = new int[n];
      int totalTime = 0;

      for (int i = 0; i < 2 * n - 1; i++) {
         State s = actions[i];
         if (s.a) {
            active.add(s.c);
         } else {
            active.remove((Integer) s.c);
         }

         if (active.size() == 1) {
            alone[active.get(0)] += actions[i + 1].t - s.t;
         }
         if (active.size() != 0) {
            totalTime += actions[i + 1].t - s.t;
         }
      }

      int minAlone = Integer.MAX_VALUE;
      for (int value : alone) {
         if (value < minAlone) {
            minAlone = value;
         }
      }

      out.println(totalTime - minAlone);
      in.close();
      out.close();
   }

   public static class State implements Comparable<State> {
      public int t;
      public int c;
      public boolean a;

      public State(int _t, int _c, boolean _a) {
         t = _t;
         c = _c;
         a = _a;
      }

      public int compareTo(State s) {
         return Integer.compare(t, s.t);
      }
   }
}
